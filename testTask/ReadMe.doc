Тестовая задача:
«Задача: написать программу на Python, которая делает следующие действия:
1. Создает 50 zip-архивов, в каждом 100 xml файлов со случайными данными следующей структуры:
<root>
	<var name=’id’ value=’<случайное уникальное строковое значение>’/>
	<var name=’level’ value=’<случайное число от 1 до 100>’/>
	<objects>
		<object name=’<случайное строковое значение>’/>
		<object name=’<случайное строковое значение>’/>
		…
	</objects>
</root>
В тэге objects случайное число (от 1 до 10) вложенных тэгов object.

2. Обрабатывает директорию с полученными zip архивами, разбирает вложенные xml файлы и формирует 2 csv файла:
Первый: id, level - по одной строке на каждый xml файл
Второй: id, object_name - по отдельной строке для каждого тэга object (получится от 1 до 10 строк на каждый xml файл)

Очень желательно сделать так, чтобы задание 2 эффективно использовало ресурсы многоядерного процессора.
Также желательно чтобы программа работала быстро.
В качестве результата нужно прислать исполняемый код программы.

Также мы хотели бы получить от вас комментарий по выполнению тестового задания. Он не должен быть очень большим. Нам интересно было бы узнать:
Примерную оценку времени, которое вы потратили на выполнение задания;
Комментарии по коду, почему выбран тот или иной способ решения;
Возникали ли проблемы при выполнении тестового.

Мое решение:
Для использования всей мощи многоядерного процессора рассматривались инструменты модулей: subprocess,  threading, multiprocessing, multiprocess. Выбран был multiprocess, как 




 выбран модуль multiprocess, который содержит наиболее простые методы распаралелливания процессов.

При выполнении тестового задания для работы с zip-архивами был выбран модуль zipfile, как наиболее простой. 


В программе используется библиотека multiprocess, которую надо установить вручную:
(sudo pip install multiprocess,...)


   Программа протестирована в Linux Debian 8 и Windows 10.  

Время ушло на: 
+ изучение и поиск подходящего инструмента для обхода (GIL) – работы с на многоядерном процессоре.
+ написание кода
+ тестирование в ОС Linux и Windows
